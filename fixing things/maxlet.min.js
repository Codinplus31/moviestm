
 
 

 				

function maxSelect(e){
  function gur(){
  let tru = e;
				if(typeof e == "string"){
		tru =	 document.querySelector(e)
	}else if(typeof e == "object"){
	  tru = e;
	  
	}else if(Array.isArray(e)){
	  tru = e;
	}
	return tru;
  }
	
const  select ={

				element:gur(),
				
								slide:(h)=>{
				
										
					
								if
	(select.element.style.height == "0px"){
	select.element.style.height = "100px"
	
	
	}
	else{
	select.element.style.height = "0px"
	
	}
	select.element.style.transition = h +"s";
	

								},
								listen:(value,callBack)=>{
				select.element.addEventListener(value,callBack)
								},
								fade:(k)=>{
											if
	(select.element.style.opacity == "0"){
	select.element.style.opacity = "1"
	
	
	}
	else{
	select.element.style.opacity = "0"
	
	}
	select.element.style.transition = k +"s";
	

								
								},
			style:(...value)=>{
			  if(value){
			    let coun,couu,co,coo;
			    let bm;
			    let f = 0;
			    let con = {};
			 value.forEach((vm,i,ar)=>{
			   
			   if(typeof vm == "string" ){
			    if(!con[vm]){
			      con[vm] = 1;
			     bm = Object.keys(con);
			    if(bm[f]){
			   let ko = "" + bm[f].slice(0,1);
			    function count(){
			      coun = 0;
for(let ii = 0; ii < bm[f].length; ii++){
			        if(bm[f].charAt(ii) == ko){
			          coun++;
			        }
			        
			      }
			    }
			    			    function cou() {
			    			      couu = 0;
			    			      co = 0;
			    			      coo = 0;
			    for (let ii = 0; ii < bm[f].length; ii++) {
			     if (bm[f].charAt(ii) == "}" ) {
			    			          couu++;
			    			        }
if(bm[f].charAt(ii) == "{"){
 co++;
			    			      }
if(bm[f].charAt(ii) == "$"){
  coo++;
}
}
			    			    }
			    			    cou();
			    			    if(!coo ==0 || !couu==0 || !co==0){
			    			     console.error("check the code @@__-avorce uncaught missing strings or use the same or double string");
bm[0] = "";
			    			  
			    			    }
if(bm[0].match("'") || bm[0].match('"') || bm[0].match("`") || bm[0].match("}") && bm[0].match("{") && bm[0].match("$")){

  count();
  if(coun === 4){
      if(bm[0].includes("''''") || bm[0].includes("````") || bm[0].includes('""""')){
   console.error("check the code @@__-avorce uncaught missing strings or use the same or double string");
   bm[0] = "";
 } else{



	  let mm = {
	    
	  }
 let val = bm[0].split("'").join("").split('"').join("").split("`").join("").split("${").join("").split("}").join("");
 let hh =  val.indexOf(":");
	let yy = val.slice(0,hh);
	let oop = val.slice(hh+1);
	     Object.assign(mm,{value});	
	     Object.defineProperty(mm,`${yy}`,{
	       writable:true,
	       configurable:true,
	       enumerable:true,
	       value:`${oop}`
	     })
	     
	  			        
	let kk = select.element.style;

			        let pp = Object.keys(mm);
			    let bb = Object.values(mm);
			    			        let aa = 0;

	while (aa < pp.length && aa < bb.length) {

			          let gg = String(pp[aa]);
			          let hh = String(bb[aa]);

			          kk.setProperty(gg, hh);
			          aa++
			    }
  }
  }else if (!coun ==4 ||  bm[0].includes("''") || bm[0].includes("'''") || bm[0].includes('""') || bm[0].includes('"""') || bm[0].includes("``") || bm[0].includes("```") ||  bm[0].includes("````") || bm[0].includes("''''") || bm[0].includes('""""') || bm[0].includes("'") || bm[0].includes('"') || bm[0].includes('`')) {
   console.error("check the code @@__-avorce uncaught missing strings or use the same or double string")
 bm[0] = "";

  }




  }else if(bm[0].includes("{") || bm[0].includes("$") || bm[0].includes("}")){

      console.error("check the code @@__-avorce uncaught missing strings or use the same or double string");

 bm[0] = "";
 
}else if(!bm[0].includes("'") || !bm[0].includes('"') || !bm[0].includes("`")
|| !bm[0].includes("{") || !bm[0].includes("$") || !bm[0].includes("}")){
  console.warn("wrong maxlet syntax or @@mistake.");
 bm[0] = "";

}
}


if(bm.length > "1"){
  console.error("warning maxlet string styling uses Parameters:1 in @@argument");
   bm[0] = "";

}
}
			   }

			 });

			  
if(typeof value == "object"){
	
			        let n = {
			    
			    
			        }
			        Object.assign(n,...value);
			        let k = select.element.style;
			        let p = Object.keys(n);
			        let b = Object.values(n);
			        let a = 0;
			        while(a < p.length && a < b.length) {
			          if(p[a].match("-")){
			          let g = String(p[a])
			          let h = String(b[a]);
			          k.setProperty(g, h);
			          }else{
			       k[String(p[a])] = b[a]
			          }
			          a++
			        }
			  }
			  
			  }
			  			let lo =   this.maxSelect().style[0]= "style"

			  let obj = { 
			   "maxSelectStyleSheet":select.element.style
			    
			  };
			  return obj;
			},
			setAttr: (values,sets)=>{
							return select.element.setAttribute(values,sets)
			},
			getAttr: (values)=>{
							return select.element.getAttribute(values)
			},
			removeAttr: (value)=>{
		select.element.removeAttribute(value)					
			},
			spline: (j)=>{
						select.element.animate([{transform:'rotate(0deg)'},{transform:'rotate(360deg)'}	], {
			duration:j,
				easing:	'linear',
				iterations: Infinity,		
	    direction:'normal',
				fill:	'both'			
							});
							
			},
			animate: (...val)=>{
//let cool = [].push(...val);
//let ban={};
// let lp =(Array.isArray(cool[i]))?cool[i]:"";

// let sda=(typeof cool[i] =="object")?(!ban[cool[i]])?ban[cool[i]]:"":"";
//console.log(sda);



/*cool.forEach(function(h){
  
  if(typeof h == "object"){
    
  }

							});*/
							
	let cool = (typeof val ==="object")?val:"";			
let mas =	cool.filter((h)=>{
  if(!Array.isArray(h) && typeof h  != "number" && typeof h != "function"){
    return h
  }
}).map((u)=>{
 return u;
  
})
	let pool = (Array.isArray(val))?val:"";
let nas =	 pool.filter((j)=>{
	  if(Array.isArray(j)){
	   return j
	  }
	})
 return select.element.animate(mas,{
			duration:	nas[0][0],
				easing:	'ease',
	    direction:'alternate',
				fill:'both'
});

			},
			hide: (lo)=>{
			setInterval(function(){	select.element.style.display="none";	
	
	},lo);
			},
			show: (lo)=>{
			setInterval(function(){	select.element.style.display="block";	
		select.element.style.transition = lo +"s";			
		},lo);
			},
			displaying: (lo)=>{
			setInterval(function(){
				if
	(select.element.style.display=="none"
){
	select.element.style.display="block";	

	
	
	}
	else{
	select.element.style.display="none";	

	
	}
	select.element.style.transition = lo +"s";			
	},lo);
		},
	slideUp: (po)=>{
				select.element.style.maxHeight = "0px";				select.element.style.transition = po +"s";			
	},
	slideDown: (pp)=>{
				select.element.style.maxHeight = "100px";				select.element.style.transition = pp +"s";			
	},
	hold: (callback)=>{
	  if(callback){
		new ClickAndHold(select.element,callback);
	  }
	},
maxHtml: (Se)=>{
if(Se){
				select.element.innerHTML = Se
}
return select.element.innerHTML
}

,
maxText: (A)=>{
if(A){
				select.element.innerText=A;
}
			return	select.element.innerText;
},
val: (Po)=>{
if(Po){
				select.element.value=Po
}
		return select.element.value
				},
				
				create: (elemen,el,ed)=>{
				var u = document.createElement(elemen);
if(elemen) {
				
				select.element.appendChild(u)
}
if(el) {
				
				u.innerHTML=el
				/*
for(i=0; i < yl.length; i++){

				yl[i].innerHTML=el;
}
*/
}

	if(ed){
 var ii = 0; 
 if(!ed.indexOf('#')) {
var yl= document.querySelectorAll(elemen);
for(i=0; i < yl.length; i++){
var tt =ed.split("#").join("");
				yl[i].setAttribute("id",tt);
}
ii = 1;
 }
else  if(!ed.indexOf("$")){
  
var ya= document.querySelectorAll(elemen);
for(i=0; i < ya.length; i++){
				var t =ed.split("$").join("");
				ya[i].setAttribute("name", t);
  				
				
				
}
ii = 2;

}

else if(!ed.indexOf(".")){
 var yy = document.querySelectorAll(elemen);
 for(i=0; i < yy.length; i++){
				
				var t =ed.split(".").join("");
				 
				yy[i].classList.add(t)
				}
				ii =3;
}

  }
	
		

				
				},
				addClass: (el)=>{
								return select.element.classList.add(el)
				},
				removeClass:(hy)=>{
		select.element.classList.remove(hy)
				},
				toggleAttr: (yy)=>{
select.element.toggleAttribute(yy)
				},
								console: ()=>{ 
								  
								  javaScript:(function() {
								  var script = document.createElement("script");
								  script.src = "//cdn.jsdelivr.net/npm/eruda";
								  document.body.appendChild(script);
								  script.onload = function() {
								    eruda.init()
								  }
								})()},
				
				
				stop: function( gotoEnd ) {
				var stopped, index,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return select.element;
				}
				stopped = true;
				for ( index = 0; index < select.element.length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( select.element, [ animation, 1, 0 ] );
					deferred.resolveWith( select.element, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( select.element, [ animation, gotoEnd ] );
				}
			}
				}
			return select;
}


function mediaQuery(call){


	
		
	
								
	window.addEventListener("DOMContentLoaded", call);
										window.addEventListener("change", call);
					
										window.addEventListener("resize", call);
		
				}

function mql(g) {
		let		media = {
	
		Query: window.matchMedia(g),
	matchs: function(){
			return		media.Query.matches
	}
	
		
				}
				
				return media;
}




function maxSelectAll(e){


	 
		
	 
 let select = {
 element: document.querySelectorAll(e),
maxText: (A)=>{
var yy =select.element;


if(A){
for(a = 0; a < yy.length; a++){
	yy[a].innerText=A
	}
}
for(a = 0; a < yy.length; a++){
			return	yy[a].innerText
			
			
			}
			
},

 	 slide:(Hh)=>{
				
					if(select.element.length > 0){
for(a =0; a < select.element.length; a++){					
if(select.element[a].style.maxHeight == "0px"){
	select.element[a].style.maxHeight = "100px"
	
	
	}else{
	select.element[a].style.maxHeight = "0px"
	
	}
	select.element[a].style.transition = Hh +"s"
	
}
}
								},
								
								
								listen:(value,callBack)=>{
			
	addEventListener(value,callBack)
								},
								
								fade:(k)=>{
								if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
											if
	(select.element[i].style.opacity == "0"){
	select.element[i].style.opacity = "1"
	
	
	}
	else{
	select.element[i].style.opacity = "0"
	
	}
	select.element[i].style.transition = k +"s";
	
}
}
								
								},
			style: (value)=>{
						if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].setAttribute("style",value);
}
}
			},
			setAttr: (values,set)=>{
						if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].setAttribute(values,set)
}
}
			},
			getAttr: (values)=>{
						if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].getAttribute(values)
		}
		}
			},
			removeAttr: (value)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].removeAttribute(value)					
			}
			}
			},
			toggleAttr: (value)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].toggleAttribute(value)					
			}
			}
			},
			addClass: (value)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].classList.add(value)					
			}
			}
			},
			removeClass: (value)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].classList.remove(value)					
			}
			}
			},
			
			spline: (j)=>{
					if(select.element.length > 0){
for(i =0; i < select.element.length; i++){	select.element[i].animate([{transform:'rotate(0deg)'} , {transform:'rotate(360deg)'}	], {
			duration:j,
				easing:	'linear',
				iterations: Infinity,		
	    direction:'normal',
				fill:	'both'			
							});
							}
							}
			},
			animate: (val,callback,time)=>{
			if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
select.element[i].animate([val,callback],{
			duration:time,
				easing:	'linear',
				iterations: Infinity,		
	    direction:'normal',
				fill:'both'
							});
							}
							}
			},
			hide: (lo)=>{
			if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
			setInterval(function(){	select.element[i].style.display="none";	
	
	},lo);
}
}
			},
			show: (lo)=>{
			if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
			setInterval(function(){	select.element[i].style.display="block";	
		select.element[i].style.transition = lo +"s";			
		},lo);
		}
		}
			},
			displaying: (lo)=>{
			if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
			setInterval(function(){
				if
	(select.element[i].style.display=="none"
){
	select.element[i].style.display="block";	

	
	
	}
	else{
	select.element[i].style.display="none";	

	
	}
	select.element[i].style.transition = lo +"s";			
	},lo);
	}
	}
		},
	slideUp: (po)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
				select.element[i].style.maxHeight = "0px";				select.element[i].style.transition = po +"s";			
				}
				}
	},
	slideDown: (pp)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
				select.element[i].style.maxHeight = "100px";				select.element[i].style.transition = pp +"s";			
				}
				}
	},
	hold: (callback)=>{
	if(select.element.length > 0){
for(i =0; i < select.element.length; i++){
					new ClickAndHold(select.element[i],callback);
					}
					}
	},
maxHtml: (vall)=>{
var yy = select.element;
if(vall){

for(i =0; i < yy.length; i++){
 yy[i].innerHTML = vall;
}
}
for(i =0; i < select.element.length; i++){
return yy[i].innerHTML
}

},
val: (Po)=>{

var yy = select.element;
if(Po){
for(i =0; i < yy.length; i++){
		yy[i].value=Po
				}
}
for(i =0; i < select.element.length; i++){
		return yy[i].value
		}

}


 
 

 }
		
		
				



		return select;
	
}




class ClickAndHold{
  constructor(target, callback){
    /**
     * @param {EventTarget} target The Html element to apply the event to
     * @param {Function} callback 
     * the function to run once the target is clicked and held
     */
    this.target = target;
    this.callback = callback;
    this.isHeld = false;
    this.activeHoldTimeoutId = null;


["mousedown","touchstart"].forEach(type =>{
  this.target.addEventListener(type, this._onHoldStart.bind(this));
  
});



["mouseup","mouseout","mouseleave","touchend","touchcancel"].forEach(type => {
  this.target.addEventListener(type, this._onHoldEnd.bind(this));

});

  }
  _onHoldStart(){
       this.isHeld = true;
       
this.activeHoldTimeoutId = setTimeout(()=> {
       if (this.isHeld){
         this.callback();
       }
     },1000);

  }
  
    _onHoldEnd() {
      this.isHeld = false;
clearTimeout(this.activeHoldTimeoutId);
    }
}




